---
title: 'ESM 244 Lab: Point Pattern Analysis'
author: 
  - "Casey O'Hara"
  - Nathan Grimes
  - Allison Horst
date: today
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
theme: superhero
execute:
  echo: true
  message: false
  warning: false
---

Load packages

```{r setup}
library(spatstat)
library(terra) 
library(tidyverse)
library(here)
library(sf)
library(tmap)
```

## Read in Data and Visualize

```{r}
### Read in the tree vole data
voles_sf <- read_sf(dsn = here("data/voledata"), 
                    layer = "ds033") %>% 
  janitor::clean_names() %>%
  select(county) %>%      
  filter(county == "HUM")


### Plot it (exploratory)
# plot(voles_sf)

### Get Humboldt County outline
humboldt_sf <- read_sf(dsn = here("data/voledata"), 
                    layer = "ca_counties") %>% 
  janitor::clean_names() %>%
  filter(name == "Humboldt") %>% 
  select(name) %>% ### Only keep one attribute (name) to simplify
  st_transform(crs = st_crs(voles_sf))



### plot them together
ggplot() +
  geom_sf(data = humboldt_sf, 
          color = "darkorchid", 
          fill = "darkorchid4", 
          size = 1) +
  geom_sf(data = voles_sf, 
          color = "orange", 
          alpha = 0.7, 
          size = 2) +
  theme_void()
```

## Point Pattern Analysis

Looking at the graph seems like there are distinct clusters of voles in Humboldt County, but there is a lot of noise so we may not be able to stay with staticstical certainity that the clusters our eyes pick out are not random.

To conduct point pattern analysis, we need to blend the voles data as points with the Humboldt County boundary as a window. Point pattern analysis **requires a 2D projection** (in this case, UTM), which is why we used the voles data CRS (UTM projection) instead of the county data CRS (unprojected lat-long). This looks quite a bit different from what we've done so far - it uses functions in `spatstat` to create point patterns that play nicely with other functions for data viz & point pattern analysis.

```{r}
### Convert vole observations to spatial point pattern
voles_ppp <- as.ppp(voles_sf) 

### Convert county boundary to observation window
humboldt_win <- as.owin(humboldt_sf) 

### Combine as a point pattern object (points + window):
voles_full <- ppp(voles_ppp$x, voles_ppp$y, window = humboldt_win)

plot(voles_full) 

```

## Make a kernel density plot:

### Density

Run to see vole "hotspots" by kernel density, then see what happens when you change sigma here!

```{r}
voles_density <- density(voles_full, sigma = 5000) ### sets variance of points

plot(voles_density)
```

Describe what the sigma parameter does.

**Controls variance of the spatial grouping. Difference could be like individual vole holes or general area.**

## Nearest neighbor (G-function)

In this week's lecture, we learned about distance methods to compare our point pattern to a scenario of complete spatial randomness. Here, we'll use both the G- and L-functions (L function is the K-function, standardized...interpretation is the same) to compare our observed point pattern to a simulated CSR scenario, to help us determine if it is *more clustered* or *more uniform* than CSR.

```{r}
#| output: false

### Make a sequence of distances over which you'll calculate G(r)
r_vec <- seq(0, 10000, by = 100) 

gfunction_out <- envelope(voles_full, fun = Gest, r = r_vec, 
                          nsim = 100) 


```

Let's examine the output, notice I turned the code chunk option for this code explicitly to `false` so it doesn't show up in the final document. We don't want to see the crazy output of the gfunction.

```{r}
#| output: false

gfunction_out ### Check the output of gfunction, then...
plot(gfunction_out)

```

The observed line is much higher than the bounds of the theoritical line. We have sufficient evidence to conclude the voles are not randomly distributed.

While the base plot looks good. Let's make our own in ggplot to practice the our wrangling skills. What is the class of the `gfunction_out` object? What are the column names? What do you think the `obs`, `theo`, `lo`, and `hi` columns represent? How do we pivot the table to a useful dataframe to plot in ggplot?

**Statistical tests prove nothing, they allow us to make our claim by adding evidence. **


```{r}
### Gather this to plot series in ggplot:
gfunction_long <- gfunction_out %>% 
  as.data.frame() %>% 
  pivot_longer(cols = obs:hi, names_to = "model", values_to = "g_val")

### Then make a graph in ggplot:
ggplot(data = gfunction_long, aes(x = r, y = g_val, group = model)) +
  geom_line(aes(color = model)) +
  theme_minimal() +
  labs(x = 'radius (m)', y = 'G(r)')

```

### L-Function

How does the G-function differ from Ripley's K-function?

With the same `envelope()` function from before, calculate the L-function. Because we're looking for the radius around points we have to change our `r` vector to match the entire size of the county \~80km. Also only use nsim=10 because it takes a long time to run.

Plot the L-function and interpret the results.



```{r}
r_vec <- seq(0, 80000, 5000)

lfunction_out <- envelope(voles_full, fun = Lest, r = r_vec, nsim = 10)

plot(lfunction_out)



```

